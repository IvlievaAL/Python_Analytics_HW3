import pandas as pd

df = pd.read_csv("kc_house_data.csv", sep = ",", encoding = "utf-8")
pd.set_option('display.max_columns', None)
# print(df.head())

# Задание 1.
# 1.1 Создать новый признак price_per_sq_lot,
# который будет содержать среднюю стоимость за
# один кв. метр общей площади

# Задание неясно сформулировано: непонятно, что требуется рассчитать.
# 1. Нет пояснений, есть ли в таблице столбец с общей площадью. 
# 2. Что имеется в виду под средней стоимостью?
# Единственное усреднение можно сделать по всей выборке - но зачем полученное единственное число,
# оно же среднее по выборке, класть в отдельный признак, оставляя т.о. остальные ячейки столбца пустыми?

# Поэтому для выполнения задания выбрано считать:
# 1. Столбца с общей площадью в таблице нет: надо посчитать сумму всех площадей
# 2. В столбец будет положено отношение стоимости к общей площади для каждого дома.

# all_sqr = df[["sqft_living","sqft_lot", "sqft_above", "sqft_basement"]].sum(axis = 1)
# df["price_per_sq_lot"] = df["price"] / all_sqr
# print(df.head())

# 1.2 Создать новый признак delta_renovated,
# который будет содержать разницу в годах между
# годом реновацией дома и годом постройки дома
# Если реновации дома не было, то в новом признаке поставьте 0

# delta = []
# for i, row in df.iterrows():
#     if row["yr_renovated"] != 0:
#         delta.append(row["yr_renovated"] - row["yr_built"])
#     else:
#         delta.append(0)
# df["delta_renovated"] = delta
# print(df.head())

# 1.3 Создайте признаки года продажи, месяца продажи

# df["year_of_sale"] = 0
# df["month_of_sale"] = 0

# 1.4 Удалите признаки date, zipcode, lat, long

# df2 = df.drop(columns = ["date", "zipcode", "lat", "long"])
# print(df2.head())

# Задание 2.
# clients = pd.DataFrame({'client_id': [1459, 4684, 3498, 3942, 4535, 2308, 2866, 2765, 1472, 4236, 2295, 939, 3840, 280, 20, 4332, 3475, 4213, 3113,
# 4809, 2134, 2242, 2068, 4929, 1384, 1589, 3317, 2260, 1727, 1764, 1611, 1474], 'house_id': [8965450190, 6823100225, 5104540330, 2131701075, 1522700060, 1189000207, 6821600300, 7137950720,
# 9510920050, 6131600255, 5428000070, 1788800910, 8100400160, 3123049142, 6306800010, 5083000375, 7920100025,
# 1951600150, 809001400, 339600110, 1622049154, 1099600250, 8563000110, 2768100205, 3995700435, 8861700030,
# 3303980210, 7731100066, 8146100580, 825069097, 3889100029, 9524100196]})

# 2.1 Присоедините к таблице clients данные по домам через метод join

# clients1 = clients.set_index("house_id")
# df1 = df.set_index("id")
# df_clients = clients1.join(df1)
# print(df_clients.reset_index())

# 2.2 Присоедините к таблице clients данные по домам через метод merge

# clients1 = clients.rename(columns = {"house_id": "id"})
# df_clients = clients1.merge(df, on = "id")
# print(df_clients)

# Задание 3: Изменение таблиц в Pandas
# 
# Составьте несколько сводных таблиц
# 
# 3.1 Найдите среднюю стоимость домов в
# зависимости от количества спален
# Отсортируйте от меньшей стоимости к большей

# desc1 = df.pivot_table(index = "bedrooms", values = "price", aggfunc = "mean").sort_values("price")
# print(desc1)

# 3.2 Найдите минимальную, среднюю и
# максимальную стоимости домов в зависимости от
# состояния дома

# desc2 = df.groupby("condition").agg({"price": ["min", "mean", "max"]})
# print(desc2)

# 3.3 Постройте таблицу с подсчетом количества
# домов в данных в зависимости от вида на
# набережную и оценкой вида.

# desc3 = df.groupby(["waterfront", "view"]).agg("size")
# print(desc3)

# 3.4 Каких домов в зависимости от этажности и количества спален больше?
# desc4 = df.groupby(["floors", "bedrooms"]).agg("size")
# print(desc4.max().index)

# desc4 = pd.crosstab(index = df["floors"], columns = df["bedrooms"])
# print(desc4)

# 3.5 Постройте таблицу с подсчетом медианной стоимости домов в данных в зависимости от состояния дома и оценки дома

desc5 = df.pivot_table(index = "condition", columns = "grade", values = "price", aggfunc = "median", fill_value = 0)
print(desc5)